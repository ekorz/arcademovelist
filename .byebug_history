c
tab.position
@tabs.each do |tab| puts tab.tab_type end
@tabs.each do |tab| puts tab.name end
tab.position
@tabs
c
self.tab != nil
self.tab == nil
self.tab
c
self.tab
c
self.tab==nil
self.tab
c
self.tab == nil
self.tab = nil
self.tab
self
c
self.tab
self.id?
self.methods
self.name
self.nae
self
self.present
self.empty
self.happy
self.initialized?
self
self.methods
self
self.id
self
self.empty?
self
self.tab
self.tab.size
self.tab?
self.tab.empty?
self.tab.builds
self.tab
self
c
f.object
c
f.object
c
f.object
c
f
f.object
f.object.class
f.object
f
f.object.class::EDIT_FIELDS
c
f.object.class::EDIT_FIELDS
c
f.object.class::EDIT_FIELDS
c
f.object.class::EDIT_FIELDS
f.object.class::EDIT_FIELDS.each do |field_hash| puts field_hash end
f.object.class::EDIT_FIELDS
f.object.class
f.object
c
f.object.class.reflect_on_association(association).klass.new
f.object.class.reflect_on_association(:characters).klass.new
f.object.class.reflect_on_association(:characters).klass
f.object.class.reflect_on_association(:characters).klass.new
c
f.object.class.reflect_on_association(:characters).klass
f.object.class.reflect_on_association(:characters).klass.new
f.object.class.reflect_on_association(:characters)
f.object.class.reflect_on_assocation(:characters)
f.object.class.reflect_on_all_associations(:has_many)
f.object.class
f.object
f
f.object
f.object.class.reflect_on_all_associations(:has_many)
f.object.class.reflect_on_all_associations
f.object.class.reflect_on_all_associations(:characters)
f.object.class.reflect_on_all_associations(:characters).new
f.object.class.reflect_on_all_associations(:characters).klass.new
f.object.class.reflect_on_associations(:characters).klass.new
f.object.class.reflect_on_association(:characters).klass.new
association
c
f.object.class.reflect_on_association(:builds).klass.new
f.object.class.reflect_on_association(:moves).klass.new
f.object.class.reflect_on_association(:movoes).klass.new
f.object.class.reflect_on_association(association).klass.new
association = @tab.plural.to_sym
f.object.class.reflect_on_association(association).klass.new
c
f.object.class.reflect_on_association(:characters).klass.new
f.object.class.reflect_on_association(association).klass.new
f.object.class.reflect_on_association(:has_many).klass.new
f.object.class.reflect_on_all_associations(:has_many).collect {|r| r.name.to_s}
f.object.class.reflect_on_all_associations(:has_many).collect
f.object.class.reflect_on_all_associations(:has_many).klass.new
f.object.class.reflect_on_association(association).klass.new
f.object.class.reflect_on_association(association).klass
f.object.class.reflect_on_association(association)
f.object.class
f.object
f.object.class.reflect_on_association(association).klass.new
association
association = @tab.plural.to_sym
@tab.plural.to_sym
c
f.object.class.reflect_on_association().klass.new
f.object.class.reflect_on_association(association).klass.new
new_fields_template f, @tab.plural.to_sym
@tab.plural.to_sym
@tab.plural
new_fields_template f, @tab.plural.to_sym
new_fields_template f
c
:f
f.object.class
f.object
f
options[:object]
c
f.fields_for @tab.plural.to_sym do |b| render "child_fields", f: b end
f.fields_for @tab.plural.to_sym do |b| puts b end
f.fields_for @tab.plural.to_sym
@tab
@tab.singular
@tab.id
c
@tab
@build
c
@tab
cc
c
@tab.plural.to_sym
@tab.plural
@tab
c
Tab.new?
Tab.new
Tab
@tab.new?
@tab
c
tab.new?
Tab.new?
c
@tab.tab_type != nil
@tab.tab_type == nil
@tab.tab_type = nil
@tab.tab_type
@tab
f
f.empty
f
Tab
tab
@tab.blank
@tab.blank?
@tab.id.empty?
@tab.id = nil
@tab.id
@tab
@tab.
@tab.plural = nil
@tab.plural
@tab.blank?
@tab
c
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b| render(partial: options[:partial], locals: {f: b}) end
content_tag(:div,:id => "#{options[:template]}")
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b| render(partial: options[:partial], locals: {f: b}) end
c
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b| render(partial: options[:partial], locals: {f: b}) end
c
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b| render(partial: options[:partial], locals: {f: b}) end
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b| puts b end
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b| puts b
f.fields_for(association,options[:object], :child_index => "new#{association}") do |b|
f.fields_for(association,options[:object], :child_index => "new#{association}" do |b|)
f.fields_for(association,options[:object], :child_index => "new#{association}")
f.fields_for(association,options[:object])
c
f.fields_for(association,options[:object])
f.fields_for(association,options[:object], :child_index => "new#{association}")
f.fields_for(association,options[:object], :child_index => "new#{association}"))
options[:object]
association
f.fields_for()
f
c
tmpl
tmpl = tmpl.gsub /(?<!\n)\n(?!\n)/, ' '
tmpl
options[:template]
c
f.object
f
c
options[:partial]
options[:template]
options[:object]
c
options[:object]
options[:template]
options[:partial]
options[:template]
c
f.object
c
f.object
c
f.objectc
f.object
c
f.object
f.plural
f.object
f
f.object.class::EDIT_FIELDS
f.object
f.object.name
f.object.class
c
f.object.class
f.object
c
f.object
c
f.object
c
f.label
f.name
f
f.tab
f.object
c
f.object
c
cc
c
f.object
c
f.object
c
f.object
f.object.class::EDIT_FIELDS
c
