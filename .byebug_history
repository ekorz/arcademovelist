c
: SELECT "fatalities".* FROM "fatalities"
SELECT "fatalities".* FROM "fatalities"
@tab.destroy
@tab
SELECT "fatalities".* FROM "fatalities" WHERE "fatalities"."tab_id" = 97
c
@tab.tabable
@tab
c
tab.send(tab.plural).column_names.include?('name')
tab.send(tab.plural).column_names.include?(name)
tab.send(tab.plural).column_names.include?(:name)
tab.send(tab.plural).column_names
tab.send(tab.plural).column_names.include?(:name)
tab.send(tab.plural)
c
tab.send(tab.plural)
c
tab.send(tab.plural)
tab.send(tab.plural).column_names.include?(:name)
c
tab.send(tab.plural).column_names.include?(:name)
tab.send(tab.plural).column_exists?(:name)
tab.send(tab.plural).include_column?(:name)
tab.plural
tab.send(tab.plural).respond_to?(:name)
tab.send(tab.plural).respond_to?(:namea)
c
tab.send(tab.plural).respond_to?(:namea)
tab.send(tab.plural).respond_to?(:name)
tab.send(tab.plural).methods
tab.send(tab.plural)
tab.plural.send
tab.plural.exist?
tab.plural.exists?
tab.plural.include?("characters")
tab.plural
tab.plural.include?('arcaher')
tab.plural.include?('name')
tab.plural.include?(name)
tab.plural.include?(:name)
tab.plural.include?
tab.plural.ord
tab.plural.to_sym
tab.plural.class
tab.plural.name
tab.plural.methods
tab.plural.attributes
tab.plural
c
params[:tabable_id]
c
@tabs
c
params[:tabable_id]
c
@tabs = Tab.where("id = '44'")c
@tabs = Tab.where(:id = 44)
@tabs.each do |tab| puts tab.position end
@tabs
@tabs.position
tab.position
@tabs.each do |tab| tab.position = params['tab'].index(tab.id.to_s) + 1 tab.save end render :nothing => true end
@tabs.each do |tab| tab.position = params['tab'].index(tab.id.to_s) + 1 tab.save end
@tabs.each do |tab| tab.position=params['tab'].index(tab.id.to_is) + 1 tab.save end
@tabs.each do |tab| puts tab end
@tabs = Tab.where("id = '44'")
@tab
tabable
Tab.where("id = '44''")
Tab.relations
Tab.all
Tabs.all
Tab.where("id = '44''")
Tab.methods
Tab.select {|id| id==3}
Tab.select {|id| id ==3}
Tab.select {|id| id > 44}
Tab.select{|id| id > 44}
Tab.select{|id| id>44}
Tab.select{|id| id=44}
Tab.select{|id| id==44}
Tab.select{|id| id==26}
Tab.select{|id| id==3}
Tab.select{* id==3}
Tab.select{|tab| tab)}
Tab.select(* where id: 3)
Tab.select(* where id=3)
Tab.select(id: 3)
Tab.select()
Tab.all
Tab.select
tab.select
Tab.methods
Tab.order('tabs.position')
Tab.order
Tab.id
Game.id
Game
this
Tab
Tab.
Tab.?
Tab.find
Tab.find(params[:id])
Tab
Tab.tabable
Tab.all
c
@tabs
tab
c
tab.position
@tabs.each do |tab| puts tab.tab_type end
@tabs.each do |tab| puts tab.name end
tab.position
@tabs
c
self.tab != nil
self.tab == nil
self.tab
c
self.tab
c
self.tab==nil
self.tab
c
self.tab == nil
self.tab = nil
self.tab
self
c
self.tab
self.id?
self.methods
self.name
self.nae
self
self.present
self.empty
self.happy
self.initialized?
self
self.methods
self
self.id
self
self.empty?
self
self.tab
self.tab.size
self.tab?
self.tab.empty?
self.tab.builds
self.tab
self
c
f.object
c
f.object
c
f.object
c
f
f.object
f.object.class
f.object
f
f.object.class::EDIT_FIELDS
c
f.object.class::EDIT_FIELDS
c
f.object.class::EDIT_FIELDS
c
f.object.class::EDIT_FIELDS
f.object.class::EDIT_FIELDS.each do |field_hash| puts field_hash end
f.object.class::EDIT_FIELDS
f.object.class
f.object
c
f.object.class.reflect_on_association(association).klass.new
f.object.class.reflect_on_association(:characters).klass.new
f.object.class.reflect_on_association(:characters).klass
f.object.class.reflect_on_association(:characters).klass.new
c
f.object.class.reflect_on_association(:characters).klass
f.object.class.reflect_on_association(:characters).klass.new
f.object.class.reflect_on_association(:characters)
f.object.class.reflect_on_assocation(:characters)
f.object.class.reflect_on_all_associations(:has_many)
f.object.class
f.object
f
f.object
f.object.class.reflect_on_all_associations(:has_many)
f.object.class.reflect_on_all_associations
f.object.class.reflect_on_all_associations(:characters)
f.object.class.reflect_on_all_associations(:characters).new
f.object.class.reflect_on_all_associations(:characters).klass.new
f.object.class.reflect_on_associations(:characters).klass.new
f.object.class.reflect_on_association(:characters).klass.new
association
c
f.object.class.reflect_on_association(:builds).klass.new
f.object.class.reflect_on_association(:moves).klass.new
f.object.class.reflect_on_association(:movoes).klass.new
f.object.class.reflect_on_association(association).klass.new
association = @tab.plural.to_sym
f.object.class.reflect_on_association(association).klass.new
c
f.object.class.reflect_on_association(:characters).klass.new
f.object.class.reflect_on_association(association).klass.new
f.object.class.reflect_on_association(:has_many).klass.new
f.object.class.reflect_on_all_associations(:has_many).collect {|r| r.name.to_s}
f.object.class.reflect_on_all_associations(:has_many).collect
f.object.class.reflect_on_all_associations(:has_many).klass.new
f.object.class.reflect_on_association(association).klass.new
f.object.class.reflect_on_association(association).klass
f.object.class.reflect_on_association(association)
f.object.class
f.object
f.object.class.reflect_on_association(association).klass.new
association
association = @tab.plural.to_sym
@tab.plural.to_sym
c
f.object.class.reflect_on_association().klass.new
f.object.class.reflect_on_association(association).klass.new
new_fields_template f, @tab.plural.to_sym
@tab.plural.to_sym
@tab.plural
new_fields_template f, @tab.plural.to_sym
new_fields_template f
c
:f
f.object.class
f.object
f
options[:object]
c
f.fields_for @tab.plural.to_sym do |b| render "child_fields", f: b end
f.fields_for @tab.plural.to_sym do |b| puts b end
f.fields_for @tab.plural.to_sym
@tab
@tab.singular
@tab.id
c
@tab
@build
c
@tab
cc
c
@tab.plural.to_sym
@tab.plural
